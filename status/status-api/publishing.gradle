ext {
    snapshot = project.version.endsWith('SNAPSHOT')

    canSign = getenv().containsKey('GPG_KEYNAME') && getenv().containsKey('GPG_PASSPHRASE')
    canPublishToSpace = getenv().containsKey('SPACE_PASSWORD') && getenv().containsKey('SPACE_USERNAME')
    canPublishToGitHub = !snapshot && canSign && getenv().containsKey('GITHUB_PASSWORD') && getenv().containsKey('GITHUB_USERNAME')
}

if (canSign) {
    ext.'signing.gnupg.keyName' = getenv('GPG_KEYNAME')
    ext.'signing.gnupg.passphrase' = getenv('GPG_PASSPHRASE')
}

if (canPublishToSpace) {
    ext {
        spaceUsername = getenv('SPACE_USERNAME')
        spacePassword = getenv('SPACE_PASSWORD')
    }
}

if (canPublishToGitHub) {
    ext {
        githubRegistryUrl = uri("https://maven.pkg.github.com/${userbase.toLowerCase()}/${rootProject.name.toLowerCase()}")
        githubUsername = getenv('GITHUB_USERNAME')
        githubPassword = getenv('GITHUB_PASSWORD')
    }
}

apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()

        if (canPublishToSpace) {
            maven {
                name = 'Space'
                url = 'https://maven.jetbrains.space/comroid/repo'

                credentials {
                    username spaceUsername
                    password spacePassword
                }
            }
        }

        if (canPublishToGitHub) {
            maven {
                name = "GitHubPackages"
                url = githubRegistryUrl

                credentials {
                    username githubUsername
                    password githubPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = artifactName
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = rootProject.name
                description = project.projectDescription
                inceptionYear = '2020'
                url = "https://github.com/$userbase/$rootProject.name".toString()

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'kaleidox'
                        name = 'Tobias Burdow'
                        email = 'contact@comroid.org'
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/$userbase/${rootProject.name}.git".toString()
                    developerConnection = "scm:git:ssh://github.com/$userbase/${rootProject.name}.git".toString()
                    url = "https://github.com/$userbase/$rootProject.name".toString()
                }
            }

            System.out.println("Registered artifact publication: '${group}:${artifactId}:${project.version}' -> $project.projectDescription")
        }
    }
}

def artifactId = publishing.publications.mavenJava.artifactId

task generateGithubPom(type: GenerateMavenPom) {
    destination = file("$projectDir/pom.xml")
    pom = publishing.publications.mavenJava.pom
}

if (canSign) {
    apply plugin: 'signing'

    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}
