plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}


group 'org.comroid'
version = rootProject.version

apply from: 'vars.gradle'
sourceCompatibility = 17
targetCompatibility = 17

task tcBuildId {
    doLast {
        println "##teamcity[buildNumber '$buildId']"
    }
}
tasks.named('jar').configure { dependsOn tcBuildId }

tasks.withType(Javadoc) {
    source = sourceSets.main.java
    options.encoding = 'UTF-8'
}

sourceSets {
    main.java.srcDirs = [file("$parent.projectDir/src/api/java")]
    main.resources.srcDirs = [file("$parent.projectDir/src/api/resources")]
    test.java.srcDirs = [file("$parent.projectDir/src/api-test/java")]
    test.resources.srcDirs = [file("$parent.projectDir/src/api-test/resources")]
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava

    try {
        archiveClassifier.set 'sources'
    } catch (MissingPropertyException ignored) {
        classifier = "sources"
    }
}

task javadocJar(type: Jar) {
    dependsOn 'javadoc'

    from javadoc.destinationDir

    try {
        archiveClassifier.set 'javadoc'
    } catch (MissingPropertyException ignored) {
        classifier = "javadoc"
    }
}

compileJava.options.encoding = 'UTF-8'

dependencies {
    if (findProject(':api') != null)
        api project(':api')
    else api 'org.comroid:api:1.0'

    // data
    api 'org.springframework.boot:spring-boot-starter-data-jpa'

    // rest
    api 'org.springframework.boot:spring-boot-starter-web'

    // utility
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

apply from: 'publishing.gradle'
